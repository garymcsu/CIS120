/*
 Educational BoosterPack MK II - Imperial March Tune
 http://boosterpackdepot.info/wiki/index.php?title=Educational_BoosterPack_MK_II
 
 
 Based on the Imperial March implementation on MSP430 LaunchPad
 posted here http://processors.wiki.ti.com/index.php/Playing_The_Imperial_March
 Originally created for Educational BoosterPack 
 Buzzer Pin was 19
 Modified for Educational BoosterPack MK II - Dec 03 2013
 Buzzer Pin = 40
 
 by Dung Dang
 */

#define note_cc 261
#define note_dd 294
#define note_ee 329
#define note_ff 349
#define note_g 391
#define note_gS 415
#define note_a 440
#define note_aS 455
#define note_b 466
#define note_cH 523
#define note_cSH 554
#define note_dH 587
#define note_dSH 622
#define note_eH 659
#define note_fH 698
#define note_fSH 740
#define note_gH 784
#define note_gSH 830
#define note_aH 880

int buzzerPin = 40;

void beep(int note, int duration)
{
  tone(buzzerPin, note, duration/2);
  delay(duration/2);
  noTone(buzzerPin);
  delay(duration/2 + 20);  
}
void setup() 
{
  pinMode(buzzerPin,OUTPUT);
}
void loop() 
{
  beep(note_a, 500);
  beep(note_a, 500);
  beep(note_a, 500);
  beep(note_ff, 350);
  beep(note_cH, 150);  
  beep(note_a, 500);
  beep(note_ff, 350);
  beep(note_cH, 150);
  beep(note_a, 650);

  delay(150);
  //end of first bit   

  beep(note_eH, 500);
  beep(note_eH, 500);
  beep(note_eH, 500);   
  beep(note_fH, 350);
  beep(note_cH, 150);
  beep(note_gS, 500);
  beep(note_ff, 350);
  beep(note_cH, 150);
  beep(note_a, 650);

  delay(150);
  //end of second bit...  

  beep(note_aH, 500);
  beep(note_a, 300);
  beep(note_a, 150);
  beep(note_aH, 400);
  beep(note_gSH, 200);
  beep(note_gH, 200); 
  beep(note_fSH, 125);
  beep(note_fH, 125);    
  beep(note_fSH, 250);

  delay(250);

  beep(note_aS, 250); 
  beep(note_dSH, 400); 
  beep(note_dH, 200);  
  beep(note_cSH, 200);  
  beep(note_cH, 125);  
  beep(note_b, 125);  
  beep(note_cH, 250);  

  delay(250);

  beep(note_ff, 125);  
  beep(note_gS, 500);  
  beep(note_ff, 375);  
  beep(note_a, 125);
  beep(note_cH, 500);
  beep(note_a, 375);  
  beep(note_cH, 125);
  beep(note_eH, 650);


  beep(note_aH, 500);
  beep(note_a, 300);
  beep(note_a, 150);
  beep(note_aH, 400);
  beep(note_gSH, 200);
  beep(note_gH, 200);
  beep(note_fSH, 125);
  beep(note_fH, 125);    
  beep(note_fSH, 250);

  delay(250);

  beep(note_aS, 250);  
  beep(note_dSH, 400);  
  beep(note_dH, 200);  
  beep(note_cSH, 200);  
  beep(note_cH, 125);  
  beep(note_b, 125);  
  beep(note_cH, 250);      

  delay(250);

  beep(note_ff, 250);  
  beep(note_gS, 500);  
  beep(note_ff, 375);  
  beep(note_cH, 125);
  beep(note_a, 500);   
  beep(note_ff, 375);   
  beep(note_cH, 125); 
  beep(note_a, 650);   
  //end of the song
}

// -------------------------------------------

///
/// @mainpage	LCD_Joystick
///
/// @details	Joystick controlled cursor
/// @n
/// @n @a		Developed with [embedXcode+](http://embedXcode.weebly.com)
///
/// @author		Rei Vilo
/// @author		http://embeddedcomputing.weebly.com
/// @date		11/12/2013 10:19
/// @version	101
///
/// @copyright	(c) Rei Vilo, 2013
/// @copyright	CC = BY SA NC
///
/// @see		ReadMe.txt for references
///


///
/// @file		LCD_Joystick.ino
/// @brief		Main sketch
///
/// @details	Joystick controlled cursor
/// @n @a		Developed with [embedXcode+](http://embedXcode.weebly.com)
///
/// @author		Rei Vilo
/// @author		http://embeddedcomputing.weebly.com
/// @date		11/12/2013 10:19
/// @version	101
///
/// @copyright	(c) Rei Vilo, 2013
/// @copyright	CC = BY SA NC
///
/// @see		ReadMe.txt for references
/// @n
///


// Core library for code-sense
#if defined(ENERGIA) // LaunchPad MSP430, Stellaris and Tiva, Experimeter Board FR5739 specific
#include "Energia.h"
#else // error
#error Platform not defined
#endif

// Prototypes


// Include application, user and local libraries
#include <SPI.h>

#include <LCD_screen.h>
#include <LCD_screen_font.h>
#include <LCD_utilities.h>
#include <Screen_HX8353E.h>
#include <Terminal12e.h>
#include <Terminal6e.h>
#include <Terminal8e.h>
Screen_HX8353E myScreen;


// Define variables and constants
#define joystickX 2
#define joystickY 26
uint16_t x, y, x00, y00;
uint16_t colour;
uint32_t z;


// Add setup code
void setup()
{
    Serial.begin(9600); // for LCD debug output

    // By default MSP432 has analogRead() set to 10 bits. 
    // This Sketch assumes 12 bits. Uncomment to line below to set analogRead()
    // to 12 bit resolution for MSP432.
    //analogReadResolution(12);

    myScreen.begin();
    x00 = 0;
    y00 = 0;
}

// Add loop code
void loop()
{
    x = map(analogRead(joystickX), 0, 4096, 0, 128);
    y = map(analogRead(joystickY), 0, 4096, 128, 0);
    if (x < 1)      x = 1;
    if (x > 126)    x = 126;
    if (y < 1)      y = 1;
    if (y > 126)    y = 126;
    
    if ((x00 != x) || (y00 != y)) {
        z = (uint32_t)((x-64)*(x-64)+(y-64)*(y-64)) >> 8;
        if (z > 4)      colour = redColour;
        else if (z > 1) colour = yellowColour;
        else            colour = greenColour;
        
        myScreen.dRectangle(x00-1, y00-1, 3, 3, blackColour);
        myScreen.dRectangle(x-1, y-1, 3, 3, colour);
        x00 = x;
        y00 = y;
    }
    
    
    myScreen.gText(0, myScreen.screenSizeY()-myScreen.fontSizeY(),
                   "x=" + i32toa((int16_t)x-64, 10, 1, 6) +" y=" + i32toa(64-(int16_t)y, 10, 1, 6),
                   colour);
}
